# -*- mode: ruby -*-
# vi: set ft=ruby :
#
# FILES TO OVERRIDE SETTINGS
CONFIG_FILE_PROD= "vagrant-prod.rb"
CONFIG_FILE_DEV = "vagrant-dev.rb"

################ OVERRIDE IN CONFIG FILE ONLY #######################       
# USE_GUI=false
## NETWORK
# PUBLIC_NETWORK=true # if false it will create a private network
# MAIN_IP_ADDR="192.168.55.50" # LEAV LAST DIGIT OUT, the instance id will be appended to it to form the ip addr
# MAIN_GATEWAY="172.20.1.254" # only required if public_network=true
# MAIN_HOSTNAME="pepe.dev.mainstorconcept.de"
# PROVIDER="lxc" # lxc or virtualbox
## HARDWARE
MAIN_CPU_COUNT=1
MAIN_RAM=1024
# MAIN_INSTANCES=1
## FOR DUMMIE MACHINES
EXTRA_MACHINES=0
EXTRA_MACHINES_RAM=756
EXTRA_MACHINES_BASE_IP="192.168.55.5" # Last digit filled by the counter
## EXTRAS
#PROJECT_NAME="unnamedApp" # Declared in CONFIG_FILE! Should be a slug

# The required config file are a directory higher, thats why ../ is prepended to
# require_relative function call
if File.exist?(CONFIG_FILE_DEV)
    puts "DEVELOPMENT: Loading settings from: #{CONFIG_FILE_DEV}"
    require_relative "../#{CONFIG_FILE_DEV}"
elsif File.exist?(CONFIG_FILE_PROD)
    puts "PRODUCTION: Loading setting from (#{CONFIG_FILE_PROD})"
    require_relative "../#{CONFIG_FILE_PROD}"
else
    puts "ERROR: You suck! Read the README man"
    puts "No PRODUCTION or DEVELOPMENT config file found on current dir"
    abort
end
# puts "\nPUBLIC_NETWORK: #{PUBLIC_NETWORK}"
# puts "USE_GUI: #{USE_GUI}"

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

    (1..MAIN_INSTANCES).each do |i|

        config.vm.define "main#{i}", primary: true do |main|
          
            main.vm.synced_folder "./", "/repo", owner: "admin"
            main.vm.hostname=MAIN_HOSTNAME

            if PROVIDER == "lxc"

                main.vm.box = "fgrehm/trusty64-lxc"
                if PUBLIC_NETWORK == false
                    main.vm.network :private_network, ip: "#{MAIN_IP_ADDR}#{i - 1}", lxc__bridge_name: "vlxcbr#{PROJECT_NAME}"
                else
                    puts ">> lxc provider does not support PUBLIC_NETWORK=true. It will not configure networks with this configuration"
                end
                main.vm.provider :lxc do |vb|
                end

            else
        
                main.vm.box = "ubuntu/trusty64"
                main.vm.box_url = "http://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-amd64-vagrant-disk1.box"
                if PUBLIC_NETWORK == true
                    # In production mode configure a 'public' ip addres and confugure
                    # the fucking gateway when provisioning. Don't forget to provision!
                    main.vm.network :public_network, ip: "#{MAIN_IP_ADDR}#{i - 1}"
                    default_router = MAIN_GATEWAY

                    # change/ensure the default route via the local network's WAN router, 
                    # useful for public_network/bridged mode
                    main.vm.provision :shell, :inline => "echo 'Network POSCONFIG'; ip route delete default || true; ip route add default via #{default_router}"
                else
                    # If not, just use the provided ip address for the private network
                    main.vm.network :private_network, ip: "#{MAIN_IP_ADDR}#{i - 1}"
                end
                main.vm.provider :virtualbox do |vb| 
                    
                    vb.gui = USE_GUI 
                    # Use VBoxManage to customize the VM
                    vb.customize ["modifyvm", :id, "--memory", EXTRA_MACHINES_RAM]
                    # Sync time every 60 sec
                    vb.customize [ "guestproperty", "set", :id, "/VirtualBox/GuestAdd/VBoxService/--timesync-set-threshold", 60000 ]

                    vb.name = "#{PROJECT_NAME}-#{i}"
                    vb.customize ["modifyvm", :id, "--memory", MAIN_RAM]
                    vb.customize ["modifyvm", :id, "--ioapic", "on"]
                    vb.customize ["modifyvm", :id, "--cpus", MAIN_CPU_COUNT]
                end
                
            end


            ###################### PROVISION ########################
            main.vm.provision :shell, :path => "mpseed/puppet-modules.sh"
            # Fix puppet dependencies (loading templates problem)
            main.vm.provision :shell, :inline => "mkdir -p /var/www/#{PROJECT_NAME}"
            main.vm.provision :shell, :inline => "ln -f -s /repo /var/www/#{PROJECT_NAME}/repo"
            main.vm.provision "shell", run: "always", inline: "sudo service uwsgi restart ; exit 0" # Exit 0 stops from blocking if restart fails (when not yet installed)

            ######################## PUPPET #########################
            main.vm.provision :puppet do |puppet|
                puppet.manifests_path = "mpseed/manifests"
                puppet.manifest_file  = "main.pp"
                puppet.facter  = {"projectid" => PROJECT_NAME}
                puppet.options  = "--debug"
            end
            if File.exists?(File.expand_path(File.join(File.dirname(__FILE__), "./puppet_extras.pp")))
                main.vm.provision :puppet do |puppet|
                    puppet.manifests_path = "."
                    puppet.manifest_file  = "puppet_extras.pp"
                    puppet.facter  = {"projectid" => PROJECT_NAME}
                    puppet.options  = "--debug"
                end
            else
                puts "INFO: No puppet_extras.pp file found. Skipping"
            end
        end 
    end 

    (1..EXTRA_MACHINES).each do |i|
        config.vm.define "vte-#{i}" do |vte|
            puts "vte can only use virtualbox. No suse/sless11 lxc support yet"
            vte.vm.provider :virtualbox do |vb| 
                vte.vm.box = "suse/sless11"
                vte.vm.box_url = "http://puppet-vagrant-boxes.puppetlabs.com/sles-11sp1-x64-vbox4210.box" 
                vte.vm.hostname="vte-#{i}"
                vte.vm.network :private_network, ip: "#{EXTRA_MACHINES_BASE_IP}#{i}"
            end
            
        end 
    end 
end
